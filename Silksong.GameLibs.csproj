<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <!--steam depots - windows: 1030301 - mac: 1030302 - linux: 1030303 -->

    <!-- version 1.0.28324 manifests - windows: 3229726349000518284 - mac: 1365730835793684614 - linux: 8384590172287463475 -->
    <!--<TargetSilksongVersion>1.0.28324</TargetSilksongVersion>-->

    <!-- version 1.0.28497 manifests - windows: 539129767115354441 - mac: 8670159430480702509 - linux: 6701825740120558137 -->
    <!--<TargetSilksongVersion>1.0.28497</TargetSilksongVersion>-->

    <!-- version 1.0.28561 manifests - windows: 8642535143474926050 - mac: 9022715293716759452 - linux: 6373658714389144408  -->
    <TargetSilksongVersion>1.0.28561</TargetSilksongVersion>
  </PropertyGroup>

  <PropertyGroup>
    <TargetFramework>netstandard2.1</TargetFramework>
    <PackageVersion>1.0.2-silksong$(TargetSilksongVersion)</PackageVersion>
    <Authors>BadMagic</Authors>
    <Description>The game libraries used for modding Hollow Knight: Silksong</Description>
    <PackageTags>silksong modding bepinex5</PackageTags>
    <IncludeBuildOutput>False</IncludeBuildOutput>
    <NoDefaultExcludes>true</NoDefaultExcludes>
    <PackageReadmeFile>doc/README.md</PackageReadmeFile>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <PackageProjectUrl>https://github.com/BadMagic100/Silksong.GameLibs</PackageProjectUrl>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <!--
    NuGet complains about using the /ref/ path in packages because it doesn't work for projects using packages.config.
    However we do not care about this and would rather declutter our users' build directories at the cost of "forcing"
    the usage of PackageReference.
    -->
    <NoWarn>$(NoWarn);NU5131</NoWarn>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="BepInEx.AssemblyPublicizer.MSBuild" Version="0.4.3" ExcludeAssets="all" GeneratePathProperty="true"/>
    <PackageReference Include="MonoMod.RuntimeDetour.HookGen" Version="22.7.31.1" PrivateAssets="all" GeneratePathProperty="true"/>
  </ItemGroup>

  <ItemGroup>
    <None Include="README.md" Pack="true" PackagePath="doc/" />
  </ItemGroup>

  <ItemGroup>
    <SystemFiles Include="ref/$(TargetSilksongVersion)/System*.dll"/>
    <SystemFiles Include="ref/$(TargetSilksongVersion)/netstandard.dll"/>
    <SystemFiles Include="ref/$(TargetSilksongVersion)/mscorlib.dll"/>
    <!-- 
    Included in UnityEngine.Modules package from BepInEx BaGet so we don't need to bundle these.
    Counterintuitively the "exclude" list is stuff which should be included in the bundle (it is excluded from the list of stuff to remove)
    because they are not covered by UnityEngine.Modules
    -->
    <SystemFiles Include="ref/$(TargetSilksongVersion)/UnityEngine*.dll" 
            Exclude="ref/$(TargetSilksongVersion)/UnityEngine.AMDModule.dll;ref/$(TargetSilksongVersion)/UnityEngine.ARModule.dll;ref/$(TargetSilksongVersion)/UnityEngine.NVIDIAModule.dll;ref/$(TargetSilksongVersion)/UnityEngine.UI.dll"/>
  </ItemGroup>

  <ItemGroup>
    <GameFiles Include="ref/$(TargetSilksongVersion)/Assembly-CSharp.dll" Publicize="true" Strip="true"/>
    <GameFiles Include="ref/$(TargetSilksongVersion)/PlayMaker.dll" Publicize="true" Strip="true"/>
  </ItemGroup>

  <ItemGroup>
    <Compile Remove="**/*" />
    <!-- System files are excluded because users don't need them. Game files are excluded because we will strip/publicize and include that instead-->
    <Content Include="ref/$(TargetSilksongVersion)/*" Exclude="@(SystemFiles);@(GameFiles)" Pack="True" PackagePath="ref/$(TargetFramework)"/>
  </ItemGroup>

  <UsingTask TaskName="PublicizeTask" AssemblyFile="$(PkgBepInEx_AssemblyPublicizer_MSBuild)/lib/netstandard2.1/BepInEx.AssemblyPublicizer.MSBuild.dll"/>
  <Target Name="StripAndPublicize" BeforeTargets="FindReferenceAssembliesForReferences" AfterTargets="ResolveReferences">
    <PropertyGroup>
      <GeneratedIgnoresAccessChecksToFile>$(IntermediateOutputPath)$(MSBuildProjectName).IgnoresAccessChecksTo.cs</GeneratedIgnoresAccessChecksToFile>
    </PropertyGroup>

    <PublicizeTask IntermediateOutputPath="$(IntermediateOutputPath)" 
            GeneratedIgnoresAccessChecksToFile="$(GeneratedIgnoresAccessChecksToFile)"
            ReferencePath="@(GameFiles)"
            PackageReference=""
            Publicize="">
        <Output TaskParameter="PublicizedReferences" ItemName="PublicizedReferences"/>
    </PublicizeTask>

    <ItemGroup>
      <Content Include="@(PublicizedReferences)" Pack="true" PackagePath="ref/$(TargetFramework)"/>
    </ItemGroup>
  </Target>

  <!-- 
  TODO - add a hookgen target later, currently does not work but we don't have a way to distribute the generated hooks to players yet anyway
  Can refer to https://github.com/BadMagic100/Grime.GameLibs/blob/d1189a5858d77fb5000f7db00be73113ac62798c/Grime.GameLibs.csproj#L59 as a starting point
  
  -->


</Project>
